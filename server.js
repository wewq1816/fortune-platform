const express = require('express');
const cors = require('cors');
const Anthropic = require('@anthropic-ai/sdk');
require('dotenv').config();

const { getDailyFortuneBySaju } = require('./engines/core/daily-engine');
const { generateDailyFortunePrompt } = require('./engines/prompts/daily-fortune-prompt');
const { getHoroscopeFortune } = require('./engines/core/horoscope-engine');
const { generateHoroscopePrompt } = require('./engines/prompts/horoscope-prompt');
const DreamEngine = require('./engines/core/dream-engine');
const { calculateCompatibility } = require('./engines/core/compatibility-engine');
const { generateCompatibilityPrompt } = require('./engines/prompts/compatibility-prompt');
const { calculateTojeong } = require('./engines/core/tojeong-engine');
const { generateTojeongPrompt } = require('./engines/prompts/tojeong-prompt');
const SajuEngine = require('./engines/core/saju-engine');
const SajuEngineExtended = require('./engines/core/saju-engine-extended');
const { getSajuPrompt } = require('./backend/prompts/saju-prompt');
const { TarotEngine } = require('./engines/core/tarot-engine');
const { generateTarotPrompt } = require('./backend/prompts/tarot-prompt');

const app = express();
const PORT = 3000;

// ÎÇòÏù¥ Í≥ÑÏÇ∞ Ìï®Ïàò
function calculateAge(year, month, day) {
  const today = new Date();
  const birthDate = new Date(year, month - 1, day);
  let age = today.getFullYear() - birthDate.getFullYear();
  const monthDiff = today.getMonth() - birthDate.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
    age--;
  }
  return age;
}

// ÎØ∏Îì§Ïõ®Ïñ¥
app.use(cors());
app.use(express.json({ charset: 'utf-8' }));
app.use(express.static('frontend'));

// engines Ìè¥ÎçîÎèÑ Ï†ïÏ†Å ÌååÏùºÎ°ú Ï†úÍ≥µ (ÌÉÄÎ°ú Îç∞Ïù¥ÌÑ∞ Ï†ëÍ∑ºÏö©)
app.use('/engines', express.static('engines'));

// UTF-8 Ïù∏ÏΩîÎî© ÏÑ§Ï†ï (ÌïúÍ∏Ä Íπ®Ïßê Î∞©ÏßÄ)
app.use((req, res, next) => {
  res.setHeader('Content-Type', 'application/json; charset=utf-8');
  next();
});

// Claude API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏
const anthropic = new Anthropic({
  apiKey: process.env.CLAUDE_API_KEY
});

// ÍøàÌï¥Î™Ω ÏóîÏßÑ Ï¥àÍ∏∞Ìôî
const dreamEngine = new DreamEngine();

// ÌÉÄÎ°ú ÏóîÏßÑ ÏÑ∏ÏÖò Ï†ÄÏû•ÏÜå (Î©îÎ™®Î¶¨)
const tarotSessions = new Map();

// ÌÉÄÎ°ú Ïπ¥Îìú API
// 1. ÏãúÏûë - 3Ïû• Ïπ¥Îìú Ï†úÏãú
app.post('/api/tarot/start', async (req, res) => {
  try {
    const { category } = req.body;
    
    const engine = new TarotEngine();
    const result = engine.startNewSession(category);
    
    // ÏÑ∏ÏÖò ID ÏÉùÏÑ± (Í∞ÑÎã®ÌïòÍ≤å ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ ÏÇ¨Ïö©)
    const sessionId = Date.now().toString();
    tarotSessions.set(sessionId, engine);
    
    res.json({
      success: true,
      sessionId,
      ...result
    });
  } catch (error) {
    console.error('ÌÉÄÎ°ú ÏãúÏûë Ïò§Î•ò:', error);
    res.status(500).json({ error: error.message });
  }
});

// 2. Ïπ¥Îìú ÏÑ†ÌÉù - Îã§Ïùå Îã®Í≥Ñ ÏßÑÌñâ
app.post('/api/tarot/next', async (req, res) => {
  try {
    const { sessionId, selectedCard } = req.body;
    
    const engine = tarotSessions.get(sessionId);
    if (!engine) {
      return res.status(404).json({ error: 'ÏÑ∏ÏÖòÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' });
    }
    
    const result = engine.selectCard(selectedCard);
    
    res.json(result);
  } catch (error) {
    console.error('ÌÉÄÎ°ú ÏÑ†ÌÉù Ïò§Î•ò:', error);
    res.status(500).json({ error: error.message });
  }
});

// 3. ÏµúÏ¢Ö Ìï¥ÏÑù - Claude Haiku Ìò∏Ï∂ú
app.post('/api/tarot/interpret', async (req, res) => {
  try {
    const { sessionId } = req.body;
    
    const engine = tarotSessions.get(sessionId);
    if (!engine) {
      return res.status(404).json({ error: 'ÏÑ∏ÏÖòÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.' });
    }
    
    const result = engine.generateFinalResult();
    
    // ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
    const prompt = generateTarotPrompt(result.meanings, result.category);
    
    // Claude Haiku Ìò∏Ï∂ú
    console.log('Claude Haiku Ìò∏Ï∂ú Ï§ë...');
    const message = await anthropic.messages.create({
      model: 'claude-3-haiku-20240307',
      max_tokens: 1000,
      messages: [{
        role: 'user',
        content: prompt
      }]
    });
    
    const interpretation = message.content[0].text;
    
    // ÏÑ∏ÏÖò Ï†ïÎ¶¨
    tarotSessions.delete(sessionId);
    
    res.json({
      success: true,
      ...result,
      interpretation,
      usage: {
        input_tokens: message.usage.input_tokens,
        output_tokens: message.usage.output_tokens
      }
    });
  } catch (error) {
    console.error('ÌÉÄÎ°ú Ìï¥ÏÑù Ïò§Î•ò:', error);
    res.status(500).json({ error: error.message });
  }
});

// üé¥ ÌÉÄÎ°ú Ïπ¥Îìú API - Îã®Ïùº ÏóîÎìúÌè¨Ïù∏Ìä∏ (ÌîÑÎ°†Ìä∏ÏóîÎìúÏö©)
app.post('/api/tarot', async (req, res) => {
  try {
    const { category, selectedCards } = req.body;
    
    console.log('üé¥ ÌÉÄÎ°ú Ìï¥ÏÑù ÏöîÏ≤≠:', { category, Ïπ¥ÎìúÏàò: selectedCards?.length });

    if (!category || !selectedCards || selectedCards.length !== 5) {
      return res.status(400).json({ 
        error: 'Ïπ¥ÌÖåÍ≥†Î¶¨ÏôÄ 5Ïû•Ïùò Ïπ¥ÎìúÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.' 
      });
    }

    // 1. Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†ïÎ≥¥
    const categoryInfo = {
      'total': 'Ï¥ùÏö¥',
      'personality': 'ÏÑ±Í≤©',
      'daeun': 'ÎåÄÏö¥',
      'wealth': 'Ïû¨Î¨ºÏö¥',
      'love': 'Ïï†Ï†ïÏö¥',
      'parents': 'Î∂ÄÎ™®Ïö¥',
      'siblings': 'ÌòïÏ†úÏö¥',
      'children': 'ÏûêÎÖÄÏö¥',
      'spouse': 'Î∞∞Ïö∞ÏûêÏö¥',
      'social': 'ÎåÄÏù∏Í¥ÄÍ≥Ñ',
      'health': 'Í±¥Í∞ïÏö¥',
      'career': 'ÏßÅÏóÖÏö¥',
      'study': 'ÌïôÏóÖÏö¥',
      'promotion': 'ÏäπÏßÑÏö¥',
      'aptitude': 'Ï†ÅÏÑ±',
      'job': 'ÏßÅÏóÖÏ∂îÏ≤ú',
      'business': 'ÏÇ¨ÏóÖÏö¥',
      'move': 'Ïù¥ÎèôÏö¥',
      'travel': 'Ïó¨ÌñâÏö¥',
      'taekil': 'ÌÉùÏùº',
      'sinsal': 'Ïã†ÏÇ¥'
    };

    // 2. ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
    const positions = ['ÌïµÏã¨', 'Í≥ºÍ±∞', 'ÎØ∏Îûò', 'Ï°∞Ïñ∏', 'Í≤∞Í≥º'];
    let prompt = `ÎãπÏã†ÏùÄ Ï†ÑÎ¨∏ ÌÉÄÎ°ú Î¶¨ÎçîÏûÖÎãàÎã§. ÏÑ†ÌÉùÎêú Ïπ¥ÌÖåÍ≥†Î¶¨Îäî **${categoryInfo[category] || category}**ÏûÖÎãàÎã§.\n\n`;
    prompt += `Í≥†Í∞ùÏù¥ ÏÑ†ÌÉùÌïú 5Ïû•Ïùò ÌÉÄÎ°ú Ïπ¥ÎìúÎ•º ÏïÑÎûòÏôÄ Í∞ôÏù¥ Ìï¥ÏÑùÌï¥Ï£ºÏÑ∏Ïöî:\n\n`;
    
    selectedCards.forEach((card, i) => {
      const orientation = card.orientation === 'upright' ? 'Ï†ïÎ∞©Ìñ•' : 'Ïó≠Î∞©Ìñ•';
      const keywords = card.orientation === 'upright' 
        ? card.keywords_upright?.join(', ') 
        : card.keywords_reversed?.join(', ');
      const meaning = card.orientation === 'upright'
        ? card.meaning_upright
        : card.meaning_reversed;
      
      prompt += `**${positions[i]}**: ${card.name_ko} (${card.name}) - ${orientation}\n`;
      prompt += `ÌÇ§ÏõåÎìú: ${keywords}\n`;
      prompt += `Í∏∞Î≥∏ ÏùòÎØ∏: ${meaning}\n`;
      
      // ‚≠ê Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌäπÌôî Ìï¥ÏÑù Ï∂îÍ∞Ä!
      if (card.category_meaning) {
        prompt += `${categoryInfo[category]} Í¥ÄÏ†ê Ìï¥ÏÑù: ${card.category_meaning}\n`;
        console.log(`‚úÖ ${card.name_ko} - Ïπ¥ÌÖåÍ≥†Î¶¨ Ìï¥ÏÑù Ìè¨Ìï®Îê® (${card.category_meaning.length}Ïûê)`);
      } else {
        console.warn(`‚ö†Ô∏è ${card.name_ko} - Ïπ¥ÌÖåÍ≥†Î¶¨ Ìï¥ÏÑù ÏóÜÏùå!`);
      }
      
      prompt += `\n`;
    });
    
    prompt += `\nÏúÑ 5Ïû•Ïùò Ïπ¥ÎìúÎ•º Î∞îÌÉïÏúºÎ°ú, ${categoryInfo[category]} Í¥ÄÏ†êÏóêÏÑú Îã§ÏùåÍ≥º Í∞ôÏù¥ Ìï¥ÏÑùÌï¥Ï£ºÏÑ∏Ïöî:\n\n`;
    prompt += `1. Í∞Å Ïπ¥ÎìúÏùò ÏúÑÏπò(ÌïµÏã¨/Í≥ºÍ±∞/ÎØ∏Îûò/Ï°∞Ïñ∏/Í≤∞Í≥º)Ïóê ÎßûÎäî Íµ¨Ï≤¥Ï†ÅÏù∏ Ìï¥ÏÑù\n`;
    prompt += `2. ${categoryInfo[category]}Ïóê Ï¥àÏ†êÏùÑ ÎßûÏ∂ò Ïã§Ïö©Ï†ÅÏù∏ Ï°∞Ïñ∏\n`;
    prompt += `3. Îî∞ÎúªÌïòÍ≥† Í≥µÍ∞êÌïòÎäî ÌÜ§ÏúºÎ°ú ÏûëÏÑ±\n`;
    prompt += `4. Í∞Å Ïπ¥ÎìúÎãπ 2-3Î¨∏Ïû•ÏúºÎ°ú Î™ÖÌôïÌïòÍ≤å ÏÑ§Î™Ö\n`;
    prompt += `5. **ÎßàÏßÄÎßâÏóê Î∞òÎìúÏãú Ï¢ÖÌï© Î∂ÑÏÑù Ï∂îÍ∞Ä** - 5Ïû• Ïπ¥ÎìúÏùò ÌùêÎ¶ÑÏùÑ Ïó∞Í≤∞ÌïòÏó¨ ${categoryInfo[category]}Ïùò Ï†ÑÏ≤¥Ï†ÅÏù∏ Í∑∏Î¶ºÍ≥º Íµ¨Ï≤¥Ï†ÅÏù∏ Ï°∞Ïñ∏ Ï†úÏãú (ÏµúÏÜå 5Î¨∏Ïû• Ïù¥ÏÉÅ)\n\n`;
    prompt += `ÏùëÎãµ ÌòïÏãù:\n`;
    prompt += `[ÌïµÏã¨] ...\n`;
    prompt += `[Í≥ºÍ±∞] ...\n`;
    prompt += `[ÎØ∏Îûò] ...\n`;
    prompt += `[Ï°∞Ïñ∏] ...\n`;
    prompt += `[Í≤∞Í≥º] ...\n\n`;
    prompt += `[Ï¢ÖÌï©Î∂ÑÏÑù]\n`;
    prompt += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    prompt += `5Ïû• Ïπ¥ÎìúÏùò ÌùêÎ¶ÑÏùÑ Ïó∞Í≤∞ÌïòÏó¨ ${categoryInfo[category]}Ïùò Ï†ÑÏ≤¥Ï†ÅÏù∏ ÏÉÅÌô©Í≥º ÏïûÏúºÎ°úÏùò Î∞©Ìñ•ÏùÑ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú Ï†úÏãúÌï¥Ï£ºÏÑ∏Ïöî.\n`;
    prompt += `Í≥ºÍ±∞‚ÜíÌïµÏã¨‚ÜíÎØ∏Îûò‚ÜíÏ°∞Ïñ∏‚ÜíÍ≤∞Í≥ºÏùò Ïä§ÌÜ†Î¶¨Î•º ÎßåÎì§Ïñ¥Ï£ºÏÑ∏Ïöî.\n`;
    prompt += `Ïã§Ïö©Ï†ÅÏù¥Í≥† Íµ¨Ï≤¥Ï†ÅÏù∏ ÌñâÎèô ÏßÄÏπ®ÏùÑ Ìè¨Ìï®Ìï¥Ï£ºÏÑ∏Ïöî.\n`;
    prompt += `ÏµúÏÜå 5Î¨∏Ïû• Ïù¥ÏÉÅÏúºÎ°ú ÌíçÎ∂ÄÌïòÍ≤å ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.`;

    // 3. Claude API Ìò∏Ï∂ú
    console.log('\n' + '='.repeat(80));
    console.log('ü§ñ Claude API Ìò∏Ï∂ú Ï§ë...');
    console.log('='.repeat(80));
    console.log(prompt);
    console.log('='.repeat(80) + '\n');
    
    const message = await anthropic.messages.create({
      model: 'claude-3-haiku-20240307',
      max_tokens: 1500,
      messages: [{
        role: 'user',
        content: prompt
      }]
    });
    
    const interpretation = message.content[0].text;
    
    console.log('‚úÖ AI Ìï¥ÏÑù ÏôÑÎ£å:', interpretation.substring(0, 100) + '...');

    // 4. Í≤∞Í≥º Î∞òÌôò
    res.json({
      success: true,
      category: categoryInfo[category],
      interpretation: interpretation,
      cards: selectedCards,
      usage: {
        input_tokens: message.usage.input_tokens,
        output_tokens: message.usage.output_tokens,
        cost: (message.usage.input_tokens / 1000 * 0.00025 + message.usage.output_tokens / 1000 * 0.00125).toFixed(6)
      }
    });

  } catch (error) {
    console.error('‚ùå ÌÉÄÎ°ú Ìï¥ÏÑù Ïò§Î•ò:', error);
    res.status(500).json({ 
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Ïò§ÎäòÏùò Ïö¥ÏÑ∏ API
app.post('/api/daily-fortune', async (req, res) => {
  try {
    const { year, month, day, hour, isLunar } = req.body;
    
    console.log('ÏöîÏ≤≠ Î∞õÏùå:', { year, month, day, hour, isLunar });
    
    // 1. ÏÇ¨Ï£º Í≥ÑÏÇ∞
    const fortuneData = getDailyFortuneBySaju({ year, month, day, hour, isLunar });
    
    if (!fortuneData.success) {
      return res.status(400).json({ error: 'ÏÇ¨Ï£º Í≥ÑÏÇ∞ Ïã§Ìå®' });
    }
    
    // 2. ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
    const prompt = generateDailyFortunePrompt(fortuneData);
    
    // ÌîÑÎ°¨ÌîÑÌä∏ Ï∂úÎ†• (ÎîîÎ≤ÑÍπÖÏö©)
    console.log('\n' + '='.repeat(70));
    console.log('[PROMPT TO CLAUDE]');
    console.log('='.repeat(70));
    console.log(prompt);
    console.log('='.repeat(70) + '\n');
    
    // 3. Claude API Ìò∏Ï∂ú
    console.log('Claude API Ìò∏Ï∂ú Ï§ë...');
    const message = await anthropic.messages.create({
      model: 'claude-3-haiku-20240307',
      max_tokens: 2000,
      messages: [{
        role: 'user',
        content: prompt
      }]
    });
    
    // 4. ÏùëÎãµ ÌååÏã±
    const responseText = message.content[0].text;
    const jsonMatch = responseText.match(/\{[\s\S]*\}/);
    let fortuneResult;
    
    if (jsonMatch) {
      fortuneResult = JSON.parse(jsonMatch[0]);
    } else {
      fortuneResult = { ÏõêÎ¨∏: responseText };
    }
    
    // 5. Í≤∞Í≥º Î∞òÌôò
    res.json({
      success: true,
      saju: fortuneData.saju,
      today: fortuneData.today,
      relationship: fortuneData.relationship,
      score: fortuneData.score,
      level: fortuneData.level,
      fortune: fortuneResult,
      cost: (message.usage.input_tokens / 1000 * 0.00025 + message.usage.output_tokens / 1000 * 0.00125).toFixed(6)
    });
    
    console.log('ÏÑ±Í≥µ!');
    
  } catch (error) {
    console.error('Ïò§Î•ò:', error);
    res.status(500).json({ error: error.message });
  }
});

// Î≥ÑÏûêÎ¶¨ Ïö¥ÏÑ∏ API
app.post('/api/horoscope', async (req, res) => {
  try {
    const { year, month, day, hour, minute } = req.body;
    
    console.log('Î≥ÑÏûêÎ¶¨ Ïö¥ÏÑ∏ ÏöîÏ≤≠:', { year, month, day, hour, minute });
    
    // 1. Î≥ÑÏûêÎ¶¨ Ïö¥ÏÑ∏ Í≥ÑÏÇ∞ (Ï†ïÎ∞Ä ÌåêÏ†ï)
    const fortuneData = getHoroscopeFortune(month, day, year, hour, minute);
    
    if (!fortuneData.success) {
      return res.status(400).json({ error: 'Î≥ÑÏûêÎ¶¨ Í≥ÑÏÇ∞ Ïã§Ìå®' });
    }
    
    // 2. ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
    const prompt = generateHoroscopePrompt(fortuneData);
    
    // 3. Claude API Ìò∏Ï∂ú
    console.log('Claude API Ìò∏Ï∂ú Ï§ë...');
    const message = await anthropic.messages.create({
      model: 'claude-3-haiku-20240307',
      max_tokens: 800,  // ÌÜ†ÌÅ∞ Ï†úÌïúÏúºÎ°ú Í∏∏Ïù¥ Ï°∞Ï†à
      temperature: 0.7,
      messages: [{
        role: 'user',
        content: prompt
      }]
    });
    
    // 4. ÏùëÎãµ ÌååÏã± (Ï†úÏñ¥ Î¨∏Ïûê Ï†úÍ±∞)
    const responseText = message.content[0].text;
    console.log('Claude ÏùëÎãµ:', responseText.substring(0, 200) + '...');
    
    const jsonMatch = responseText.match(/\{[\s\S]*\}/);
    let fortuneResult;
    
    if (jsonMatch) {
      try {
        // JSON ÌååÏã± Ï†ÑÏóê Ï†úÏñ¥ Î¨∏Ïûê Ï†úÍ±∞
        const cleanedJson = jsonMatch[0]
          .replace(/[\u0000-\u001F\u007F-\u009F]/g, '') // Ï†úÏñ¥ Î¨∏Ïûê Ï†úÍ±∞
          .replace(/\n/g, '\\n')  // Ï§ÑÎ∞îÍøàÏùÑ Ïù¥Ïä§ÏºÄÏù¥ÌîÑ
          .replace(/\r/g, '\\r')  // Ï∫êÎ¶¨ÏßÄ Î¶¨ÌÑ¥ÏùÑ Ïù¥Ïä§ÏºÄÏù¥ÌîÑ
          .replace(/\t/g, '\\t'); // ÌÉ≠ÏùÑ Ïù¥Ïä§ÏºÄÏù¥ÌîÑ
        
        fortuneResult = JSON.parse(cleanedJson);
      } catch (parseError) {
        console.error('JSON ÌååÏã± Ïò§Î•ò:', parseError.message);
        console.log('Î¨∏Ï†úÍ∞Ä Îêú JSON:', jsonMatch[0].substring(0, 500));
        // ÌååÏã± Ïã§Ìå® Ïãú ÏõêÎ≥∏ ÌÖçÏä§Ìä∏ ÏÇ¨Ïö©
        fortuneResult = { Ïö¥ÏÑ∏: responseText };
      }
    } else {
      fortuneResult = { Ïö¥ÏÑ∏: responseText };
    }
    
    // 5. Í≤∞Í≥º Î∞òÌôò
    res.json({
      success: true,
      sign: fortuneData.sign,
      signEn: fortuneData.signEn,
      symbol: fortuneData.symbol,
      level: fortuneData.level,
      score: fortuneData.score,
      date: fortuneData.date,
      fortune: fortuneResult,
      cost: (message.usage.input_tokens / 1000 * 0.00025 + message.usage.output_tokens / 1000 * 0.00125).toFixed(6)
    });
    
    console.log('Î≥ÑÏûêÎ¶¨ Ïö¥ÏÑ∏ ÏÉùÏÑ± ÏôÑÎ£å!');
    
  } catch (error) {
    console.error('Î≥ÑÏûêÎ¶¨ Ïö¥ÏÑ∏ Ïò§Î•ò:', error);
    res.status(500).json({ error: error.message });
  }
});

// ========================================
// ÍøàÌï¥Î™Ω API
// ========================================

/**
 * Íøà Í≤ÄÏÉâ
 * GET /api/dream?q=Î±Ä&category=ÎèôÎ¨º&limit=10&offset=0
 */
app.get('/api/dream', (req, res) => {
  try {
    const { q, category, limit, offset } = req.query;
    
    console.log('Íøà Í≤ÄÏÉâ ÏöîÏ≤≠:', { q, category, limit, offset });
    
    if (!q) {
      return res.status(400).json({
        success: false,
        message: 'Í≤ÄÏÉâÏñ¥(q)Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî'
      });
    }
    
    const result = dreamEngine.search(q, {
      category: category || null,
      limit: parseInt(limit) || 10,
      offset: parseInt(offset) || 0,
      includeRelated: true
    });
    
    res.json(result);
    
  } catch (error) {
    console.error('Íøà Í≤ÄÏÉâ Ïò§Î•ò:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

/**
 * ÌäπÏ†ï Íøà Ï°∞Ìöå
 * GET /api/dream/:id
 */
app.get('/api/dream/:id', (req, res) => {
  try {
    const { id } = req.params;
    
    console.log('Íøà Ï°∞Ìöå ÏöîÏ≤≠:', id);
    
    const result = dreamEngine.getDreamById(id);
    
    res.json(result);
    
  } catch (error) {
    console.error('Íøà Ï°∞Ìöå Ïò§Î•ò:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

/**
 * Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù
 * GET /api/dream/categories/list
 */
app.get('/api/dream/categories/list', (req, res) => {
  try {
    console.log('Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù ÏöîÏ≤≠');
    
    const result = dreamEngine.getCategories();
    
    res.json(result);
    
  } catch (error) {
    console.error('Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù Ïò§Î•ò:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

/**
 * AI ÍøàÌï¥Î™Ω (DBÏóê ÏóÜÏùÑ Îïå ÏÇ¨Ïö©)
 * POST /api/dream/ai-interpret
 * Body: { query: "Ïú†ÌäúÎ∏å" }
 */
app.post('/api/dream/ai-interpret', async (req, res) => {
  try {
    const { query } = req.body;
    
    console.log('AI ÍøàÌï¥Î™Ω ÏöîÏ≤≠:', query);
    
    if (!query) {
      return res.status(400).json({
        success: false,
        message: 'Í≤ÄÏÉâÏñ¥(query)Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî'
      });
    }
    
    // AI Ìï¥ÏÑù Ïã§Ìñâ
    const result = await dreamEngine.interpretWithAI(query);
    
    res.json(result);
    
  } catch (error) {
    console.error('AI ÍøàÌï¥Î™Ω Ïò§Î•ò:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

/**
 * DB Í∏∞Î∞ò AI ÍøàÌï¥Î™Ω (Î©îÏù∏ Í∏∞Îä•!)
 * POST /api/dream/interpret
 * Body: { query: "Ïö©Ïù¥ ÌïòÎäòÏùÑ ÎÇòÎäî Íøà" }
 */
app.post('/api/dream/interpret', async (req, res) => {
  try {
    const { query } = req.body;
    
    console.log('DB Í∏∞Î∞ò AI ÍøàÌï¥Î™Ω ÏöîÏ≤≠:', query);
    
    if (!query) {
      return res.status(400).json({
        success: false,
        message: 'Íøà ÎÇ¥Ïö©(query)ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî'
      });
    }
    
    // DB Í≤ÄÏÉâ + AI Ìï¥ÏÑù (ÌïòÏù¥Î∏åÎ¶¨Îìú)
    const result = await dreamEngine.interpretWithDB(query);
    
    res.json(result);
    
  } catch (error) {
    console.error('DB Í∏∞Î∞ò AI ÍøàÌï¥Î™Ω Ïò§Î•ò:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

/**
 * Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Íøà Î™©Î°ù
 * GET /api/dream/categories/:category?limit=20&offset=0
 */
app.get('/api/dream/categories/:category', (req, res) => {
  try {
    const { category } = req.params;
    const { limit, offset } = req.query;
    
    console.log('Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Íøà Î™©Î°ù ÏöîÏ≤≠:', { category, limit, offset });
    
    const result = dreamEngine.getDreamsByCategory(
      category,
      parseInt(limit) || 20,
      parseInt(offset) || 0
    );
    
    res.json(result);
    
  } catch (error) {
    console.error('Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Íøà Î™©Î°ù Ïò§Î•ò:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

/**
 * Ïù∏Í∏∞ Í≤ÄÏÉâÏñ¥
 * GET /api/dream/popular?limit=10
 */
app.get('/api/dream/popular', (req, res) => {
  try {
    const { limit } = req.query;
    
    console.log('Ïù∏Í∏∞ Í≤ÄÏÉâÏñ¥ ÏöîÏ≤≠:', limit);
    
    const result = dreamEngine.getPopularSearches(parseInt(limit) || 10);
    
    res.json(result);
    
  } catch (error) {
    console.error('Ïù∏Í∏∞ Í≤ÄÏÉâÏñ¥ Ïò§Î•ò:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

/**
 * ÎûúÎç§ Íøà
 * GET /api/dream/random
 */
app.get('/api/dream/random', (req, res) => {
  try {
    console.log('ÎûúÎç§ Íøà ÏöîÏ≤≠');
    
    const result = dreamEngine.getRandomDream();
    
    res.json(result);
    
  } catch (error) {
    console.error('ÎûúÎç§ Íøà Ïò§Î•ò:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

/**
 * DB ÌÜµÍ≥Ñ
 * GET /api/dream/stats
 */
app.get('/api/dream/stats', (req, res) => {
  try {
    console.log('DB ÌÜµÍ≥Ñ ÏöîÏ≤≠');
    
    const result = dreamEngine.getStats();
    
    res.json(result);
    
  } catch (error) {
    console.error('DB ÌÜµÍ≥Ñ Ïò§Î•ò:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

// ========================================
// Í∂ÅÌï© API
// ========================================

/**
 * Í∂ÅÌï© Í≥ÑÏÇ∞
 * POST /api/compatibility
 * Body: {
 *   type: 'lover' | 'marriage' | 'family' | 'friend' | 'business' | 'work',
 *   person1: { year, month, day },
 *   person2: { year, month, day }
 * }
 */
app.post('/api/compatibility', async (req, res) => {
  try {
    const { type, person1, person2 } = req.body;
    
    console.log('Í∂ÅÌï© Í≥ÑÏÇ∞ ÏöîÏ≤≠:', { type, person1, person2 });
    
    // ÏûÖÎ†• Í≤ÄÏ¶ù
    if (!type || !person1 || !person2) {
      return res.status(400).json({
        success: false,
        message: 'Í∂ÅÌï© ÌÉÄÏûÖÍ≥º Îëê ÏÇ¨ÎûåÏùò Ï†ïÎ≥¥Î•º Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî'
      });
    }
    
    if (!person1.year || !person2.year) {
      return res.status(400).json({
        success: false,
        message: 'ÏÉùÎÖÑÏõîÏùºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî'
      });
    }
    
    // 1. Í∂ÅÌï© Í≥ÑÏÇ∞
    const compatibilityData = calculateCompatibility(person1, person2, type);
    
    if (!compatibilityData.success) {
      return res.status(400).json({
        success: false,
        message: compatibilityData.message
      });
    }
    
    // 2. ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
    const prompt = generateCompatibilityPrompt(compatibilityData);
    
    // 3. Claude API Ìò∏Ï∂ú
    console.log('Claude API Ìò∏Ï∂ú Ï§ë...');
    const message = await anthropic.messages.create({
      model: 'claude-3-haiku-20240307',  // Haiku ÏÇ¨Ïö© (ÎπÑÏö© Ï†àÍ∞ê)
      max_tokens: 1500,
      messages: [{
        role: 'user',
        content: prompt
      }]
    });
    
    // 4. ÏùëÎãµ ÌååÏã±
    const responseText = message.content[0].text;
    const jsonMatch = responseText.match(/\{[\s\S]*\}/);
    let fortuneResult;
    
    if (jsonMatch) {
      fortuneResult = JSON.parse(jsonMatch[0]);
    } else {
      fortuneResult = { Í∂ÅÌï©Î∂ÑÏÑù: responseText };
    }
    
    // 5. Í≤∞Í≥º Î∞òÌôò
    res.json({
      success: true,
      type: compatibilityData.type,
      typeName: compatibilityData.typeName,
      typeIcon: compatibilityData.typeIcon,
      score: compatibilityData.score,
      level: compatibilityData.level,
      stars: compatibilityData.stars,
      person1: compatibilityData.person1,
      person2: compatibilityData.person2,
      elementRelation: compatibilityData.elementRelation,
      zodiacRelation: compatibilityData.zodiacRelation,
      weights: compatibilityData.weights,
      interpretation: fortuneResult,
      cost: (message.usage.input_tokens / 1000 * 0.00025 + message.usage.output_tokens / 1000 * 0.00125).toFixed(6)
    });
    
    console.log('Í∂ÅÌï© Í≥ÑÏÇ∞ ÏôÑÎ£å!');
    
  } catch (error) {
    console.error('Í∂ÅÌï© Í≥ÑÏÇ∞ Ïò§Î•ò:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

// ÌÜ†Ï†ïÎπÑÍ≤∞ API
app.post('/api/tojeong', async (req, res) => {
  try {
    const { year, month, day, isLunar, targetYear, category } = req.body;
    
    console.log('ÌÜ†Ï†ïÎπÑÍ≤∞ ÏöîÏ≤≠:', { year, month, day, isLunar, targetYear, category });
    
    // 1. ÏóîÏßÑ Í≥ÑÏÇ∞
    const tojeongData = calculateTojeong(
      { year, month, day, isLunar },
      targetYear
    );
    
    if (!tojeongData.success) {
      return res.status(400).json({ 
        success: false,
        error: tojeongData.error || 'ÌÜ†Ï†ïÎπÑÍ≤∞ Í≥ÑÏÇ∞ Ïã§Ìå®' 
      });
    }
    
    // 2. ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ± (Ïπ¥ÌÖåÍ≥†Î¶¨ Ìè¨Ìï®)
    const prompt = generateTojeongPrompt(tojeongData, category);
    
    // ÌîÑÎ°¨ÌîÑÌä∏ Í∏∏Ïù¥ ÌôïÏù∏
    console.log('üìù ÌîÑÎ°¨ÌîÑÌä∏ Í∏∏Ïù¥:', prompt.length, 'Ïûê');
    console.log('üìù ÌîÑÎ°¨ÌîÑÌä∏ ÎØ∏Î¶¨Î≥¥Í∏∞:');
    console.log('='.repeat(80));
    console.log(prompt.substring(0, 500) + '...');
    console.log('='.repeat(80));
    
    // 3. Claude API Ìò∏Ï∂ú
    console.log('Claude API Ìò∏Ï∂ú Ï§ë...');
    const message = await anthropic.messages.create({
      model: 'claude-3-haiku-20240307',
      max_tokens: 4000,  // Haiku ÏµúÎåÄ Ï†úÌïú: 4096 (Ïó¨Ïú† 4000)
      messages: [{
        role: 'user',
        content: prompt
      }]
    });
    
    // 4. ÏùëÎãµ ÌååÏã±
    const responseText = message.content[0].text;
    console.log('Claude ÏùëÎãµ:', responseText.substring(0, 200) + '...');
    
    const jsonMatch = responseText.match(/\{[\s\S]*\}/);
    let fortuneResult;
    
    if (jsonMatch) {
      fortuneResult = JSON.parse(jsonMatch[0]);
    } else {
      fortuneResult = { 
        Ï¢ÖÌï©Ïö¥ÏÑ∏: responseText,
        ÏõîÎ≥ÑÏö¥ÏÑ∏: {}
      };
    }
    
    // 5. Í≤∞Í≥º Î∞òÌôò
    res.json({
      success: true,
      year: tojeongData.year,
      yearGanzi: tojeongData.yearGanzi,
      age: tojeongData.age,
      mainGua: tojeongData.mainGua,
      monthlyFortune: tojeongData.monthlyFortune,
      fortune: fortuneResult,
      cost: (
        message.usage.input_tokens / 1000 * 0.00025 + 
        message.usage.output_tokens / 1000 * 0.00125
      ).toFixed(6)
    });
    
    console.log('ÌÜ†Ï†ïÎπÑÍ≤∞ ÏÉùÏÑ± ÏôÑÎ£å!');
    
  } catch (error) {
    console.error('ÌÜ†Ï†ïÎπÑÍ≤∞ Ïò§Î•ò:', error);
    res.status(500).json({ 
      success: false,
      error: error.message 
    });
  }
});

// ÏÇ¨Ï£ºÌåîÏûê API ‚≠ê ÏÉàÎ°ú Ï∂îÍ∞Ä!
app.post('/api/saju', async (req, res) => {
  try {
    const { year, month, day, hour, isLunar, gender, category } = req.body;
    
    console.log('ÏÇ¨Ï£ºÌåîÏûê ÏöîÏ≤≠:', { year, month, day, hour, gender, category });
    
    // 1. ÏÇ¨Ï£º ÏóîÏßÑ Í≥ÑÏÇ∞
    const sajuEngine = new SajuEngine();
    const saju = sajuEngine.calculateSaju({ year, month, day, hour, isLunar });
    const elements = sajuEngine.calculateElements(saju);
    const strength = sajuEngine.calculateStrength(saju, elements);
    const yongsin = sajuEngine.findYongsin(strength, elements, saju.ilgan);
    const tenStars = sajuEngine.calculateTenStars(saju);
    
    const engineResult = {
      saju,
      ilgan: saju.ilgan,
      elements,
      strength,
      yongsin,
      tenStars
    };
    
    console.log('ÏóîÏßÑ Í≥ÑÏÇ∞ ÏôÑÎ£å:', engineResult);
    
    // 2. Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ï∂îÍ∞Ä Í≥ÑÏÇ∞ (ÎåÄÏö¥, Ïã†ÏÇ¥, ÌÉùÏùº)
    const options = { gender };
    
    // ÎåÄÏö¥ Ïπ¥ÌÖåÍ≥†Î¶¨
    if (category === 'daeun') {
      const daeunList = SajuEngineExtended.calculateDaeun(year, month, day, hour, gender, isLunar);
      const currentAge = calculateAge(year, month, day);
      options.daeunList = daeunList;
      options.currentAge = currentAge;
      console.log('ÎåÄÏö¥ Í≥ÑÏÇ∞ ÏôÑÎ£å:', { currentAge, daeunCount: daeunList?.length });
    }
    
    // Ïã†ÏÇ¥ Í¥ÄÎ†® Ïπ¥ÌÖåÍ≥†Î¶¨ (Ïã†ÏÇ¥, Ïù¥ÎèôÏö¥, Ïó¨ÌñâÏö¥)
    if (category === 'sinsal' || category === 'move' || category === 'travel') {
      const sinsal = SajuEngineExtended.calculateSinsal(saju);
      options.sinsal = sinsal;
      console.log('Ïã†ÏÇ¥ Í≥ÑÏÇ∞ ÏôÑÎ£å:', sinsal);
    }
    
    // ÌÉùÏùº Ïπ¥ÌÖåÍ≥†Î¶¨
    if (category === 'taekil') {
      const today = new Date();
      const targetYear = today.getFullYear();
      const targetMonth = today.getMonth() + 1;
      const purpose = req.body.purpose || 'general'; // ÌîÑÎ°†Ìä∏ÏóêÏÑú Î™©Ï†Å Î∞õÍ∏∞
      const taekilResults = SajuEngineExtended.calculateTaekil(targetYear, targetMonth, saju, purpose);
      options.taekilResults = taekilResults;
      options.purpose = purpose;
      console.log('ÌÉùÏùº Í≥ÑÏÇ∞ ÏôÑÎ£å:', { targetYear, targetMonth, purpose });
    }
    
    // 3. ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
    const prompt = getSajuPrompt(category, engineResult, options);
    console.log('ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ± ÏôÑÎ£å');
    console.log('='.repeat(80));
    console.log('üìù Claude API ÌîÑÎ°¨ÌîÑÌä∏:');
    console.log(prompt);
    console.log('='.repeat(80));
    
    // 3. Claude API Ìò∏Ï∂ú (Ïã§Ï†ú Ïó∞Îèô)
    const message = await anthropic.messages.create({
      model: 'claude-3-haiku-20240307',
      max_tokens: 2500,  // Ï∂©Î∂ÑÌïú ÏùëÎãµ Í∏∏Ïù¥ ÌôïÎ≥¥ (ÏïΩ 7500~10000Ïûê)
      messages: [{
        role: 'user',
        content: prompt
      }]
    });
    const interpretation = message.content[0].text;
    const cost = (
      message.usage.input_tokens / 1000 * 0.00025 + 
      message.usage.output_tokens / 1000 * 0.00125
    ).toFixed(6);
    
    console.log('='.repeat(80));
    console.log('‚ú® Claude API ÏùëÎãµ:');
    console.log(interpretation);
    console.log('='.repeat(80));
    console.log(`üí∞ ÎπÑÏö©: $${cost} (ÏûÖÎ†•: ${message.usage.input_tokens} ÌÜ†ÌÅ∞, Ï∂úÎ†•: ${message.usage.output_tokens} ÌÜ†ÌÅ∞)`);
    console.log('='.repeat(80));
    
    // 4. Í≤∞Í≥º Î∞òÌôò
    res.json({
      success: true,
      saju: {
        year: saju.year,
        month: saju.month,
        day: saju.day,
        hour: saju.hour,
        ilgan: saju.ilgan
      },
      elements,
      strength,
      yongsin,
      tenStars,
      interpretation,
      cost // Ïã§Ï†ú Claude API ÎπÑÏö©
    });
    
    console.log('ÏÇ¨Ï£ºÌåîÏûê ÏùëÎãµ ÏôÑÎ£å!');
    
  } catch (error) {
    console.error('ÏÇ¨Ï£ºÌåîÏûê Ïò§Î•ò:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

app.listen(PORT, () => {
  console.log('='.repeat(70));
  console.log(`üîÆ Ïö¥ÏÑ∏ ÌîåÎû´Ìèº ÏÑúÎ≤Ñ Ïã§Ìñâ Ï§ë!`);
  console.log(`üìç Ï£ºÏÜå: http://localhost:${PORT}`);
  console.log(`üåê ÌîÑÎ°†Ìä∏ÏóîÎìú: http://localhost:${PORT}/index.html`);
  console.log('\nüìã API ÏóîÎìúÌè¨Ïù∏Ìä∏:');
  console.log('  ‚Ä¢ POST /api/daily-fortune - Ïò§ÎäòÏùò Ïö¥ÏÑ∏');
  console.log('  ‚Ä¢ POST /api/horoscope - Î≥ÑÏûêÎ¶¨ Ïö¥ÏÑ∏');
  console.log('  ‚Ä¢ POST /api/compatibility - Í∂ÅÌï© Î≥¥Í∏∞');
  console.log('  ‚Ä¢ POST /api/tojeong - ÌÜ†Ï†ïÎπÑÍ≤∞');
  console.log('  ‚Ä¢ POST /api/saju - ÏÇ¨Ï£ºÌåîÏûê ‚≠ê ÏÉàÎ°ú Ï∂îÍ∞Ä!');
  console.log('  ‚Ä¢ POST /api/tarot/start - ÌÉÄÎ°ú ÏãúÏûë üé¥');
  console.log('  ‚Ä¢ POST /api/tarot/next - ÌÉÄÎ°ú Îã§Ïùå Îã®Í≥Ñ üé¥');
  console.log('  ‚Ä¢ POST /api/tarot/interpret - ÌÉÄÎ°ú Ìï¥ÏÑù üé¥');
  console.log('  ‚Ä¢ GET  /api/dream?q=Í≤ÄÏÉâÏñ¥ - Íøà Í≤ÄÏÉâ');
  console.log('  ‚Ä¢ GET  /api/dream/:id - ÌäπÏ†ï Íøà Ï°∞Ìöå');
  console.log('  ‚Ä¢ GET  /api/dream/categories/list - Ïπ¥ÌÖåÍ≥†Î¶¨ Î™©Î°ù');
  console.log('  ‚Ä¢ GET  /api/dream/categories/:category - Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Íøà');
  console.log('  ‚Ä¢ GET  /api/dream/popular - Ïù∏Í∏∞ Í≤ÄÏÉâÏñ¥');
  console.log('  ‚Ä¢ GET  /api/dream/random - ÎûúÎç§ Íøà');
  console.log('  ‚Ä¢ GET  /api/dream/stats - DB ÌÜµÍ≥Ñ');
  console.log('='.repeat(70));
});
